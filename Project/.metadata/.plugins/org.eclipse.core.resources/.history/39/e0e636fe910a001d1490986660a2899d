package com.impact.project.serviceimpl;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import com.impact.project.dto.PhysicianDto;
import com.impact.project.entities.Employee;
import com.impact.project.entities.Physician;
import com.impact.project.repo.PhysicianDao;

@ExtendWith(MockitoExtension.class)
class PhysicianServiceImplTest {

    @Mock
    private PhysicianDao physicianDao;

    @InjectMocks
    PhysicianServiceImpl physicianServiceImpl;

    Physician physician;

    List<Physician> physicianList;

    PhysicianDto physicianDto;

    List<PhysicianDto> physicianDtoList;

    @BeforeEach
    public void setUp() {

        Employee emp = new Employee();
        emp.setEmployeeId(1);
        emp.setEmployeeName("Divya");

        physicianList = new ArrayList<>();
        physician = new Physician();
        physician.setPhysicianId(1);
        physician.setActive(false);
        physician.setEmployee(emp);
        physicianList.add(physician);

        physicianDtoList = new ArrayList<>();
        physicianDto = new PhysicianDto();
        physicianDto.setPhysicianId(1);
        physicianDto.setPhysicianName(physician.getEmployee().getEmployeeName());
        physicianDto.setSpecialization("Dermotologiest");
        physicianDtoList.add(physicianDto);
    }

    @Test
    void testUpdatePhysician() {
        fail("Not yet implemented");
    }

    @Test
    void testGetAllPhysiciansDetails() {
        // fail("Not yet implemented");
        Mockito.when(physicianDao.findAll()).thenReturn(physicianList);
        assertEquals(1, physicianServiceImpl.getAllPhysiciansDetails().size());
    }

    @Test
    void testGetPhysicianById() throws Exception {
        // fail("Not yet implemented");
        Optional<Physician> physicianOptional = Optional.of(physician);
        Mockito.when(physicianDao.findById(1)).thenReturn(physicianOptional);
        assertThat(physicianServiceImpl.getPhysicianById(1)).isNotNull();
    }

    @Test
    void testGetAllPhysicianListForAppointment() {
        // fail("Not yet implemented");
        Mockito.when(physicianDao.findAll()).thenReturn(physicianList);
        assertThat(physicianServiceImpl.getAllPhysicianListForAppointment()).isEqualTo(physicianDto);
    }

    @Test
    void testGetSpecializationAddress() {
        fail("Not yet implemented");
    }

}
